// Function metadata powering IntelliSense suggestions; tweak to add/remove Excel APIs.
const FUNCTION_ITEMS = [
  { name: 'ABS', signature: 'ABS(number)', detail: 'Return the absolute value of a number.' },
  { name: 'ACOS', signature: 'ACOS(number)', detail: 'Return the arccosine of a number.' },
  { name: 'ACOSH', signature: 'ACOSH(number)', detail: 'Return the inverse hyperbolic cosine of a number.' },
  { name: 'ADDRESS', signature: 'ADDRESS(row_num, column_num, [abs_num], [a1], [sheet_text])', detail: 'Create a cell reference as text.' },
  { name: 'AND', signature: 'AND(logical1, [logical2], ...)', detail: 'Return TRUE if all arguments are TRUE.' },
  { name: 'ARRAYTOTEXT', signature: 'ARRAYTOTEXT(array, [format])', detail: 'Return an array of text values from the provided array.' },
  { name: 'AVERAGE', signature: 'AVERAGE(number1, [number2], ...)', detail: 'Average the numbers provided as arguments.' },
  { name: 'AVERAGEIF', signature: 'AVERAGEIF(range, criteria, [average_range])', detail: 'Average the cells that meet a single criterion.' },
  { name: 'AVERAGEIFS', signature: 'AVERAGEIFS(average_range, criteria_range1, criteria1, ...)', detail: 'Average the cells that meet multiple criteria.' },
  { name: 'BYROW', signature: 'BYROW(array, lambda)', detail: 'Apply a LAMBDA to each row and return an array of results.' },
  { name: 'BYCOL', signature: 'BYCOL(array, lambda)', detail: 'Apply a LAMBDA to each column and return an array of results.' },
  { name: 'CEILING', signature: 'CEILING(number, significance)', detail: 'Round a number up to the nearest multiple of significance.' },
  { name: 'CHOOSE', signature: 'CHOOSE(index_num, value1, [value2], ...)', detail: 'Pick a value from the list of arguments.' },
  { name: 'CHOOSECOLS', signature: 'CHOOSECOLS(array, col_num1, [col_num2], ...)', detail: 'Return specific columns from an array.' },
  { name: 'CHOOSEROWS', signature: 'CHOOSEROWS(array, row_num1, [row_num2], ...)', detail: 'Return specific rows from an array.' },
  { name: 'COLUMN', signature: 'COLUMN([reference])', detail: 'Return the column number of a reference.' },
  { name: 'COLUMNS', signature: 'COLUMNS(array)', detail: 'Return the number of columns in an array.' },
  { name: 'CONCAT', signature: 'CONCAT(text1, [text2], ...)', detail: 'Combine text from multiple ranges and/or strings.' },
  { name: 'CONCATENATE', signature: 'CONCATENATE(text1, [text2], ...)', detail: 'Join several text items into a single text string.' },
  { name: 'COUNT', signature: 'COUNT(value1, [value2], ...)', detail: 'Count the number of cells that contain numbers.' },
  { name: 'COUNTA', signature: 'COUNTA(value1, [value2], ...)', detail: 'Count the number of non-empty cells.' },
  { name: 'COUNTBLANK', signature: 'COUNTBLANK(range)', detail: 'Count the number of empty cells in a range.' },
  { name: 'COUNTIF', signature: 'COUNTIF(range, criteria)', detail: 'Count cells that meet a single criterion.' },
  { name: 'COUNTIFS', signature: 'COUNTIFS(criteria_range1, criteria1, ...)', detail: 'Count cells that meet multiple criteria.' },
  { name: 'DATE', signature: 'DATE(year, month, day)', detail: 'Return the serial number of a particular date.' },
  { name: 'DATEDIF', signature: 'DATEDIF(start_date, end_date, unit)', detail: 'Calculate the difference between two dates.' },
  { name: 'DATEVALUE', signature: 'DATEVALUE(date_text)', detail: 'Convert a date in text to a serial number.' },
  { name: 'DROP', signature: 'DROP(array, rows, [columns])', detail: 'Drop rows or columns from an array.' },
  { name: 'EDATE', signature: 'EDATE(start_date, months)', detail: 'Return a date moved forward or backward by a number of months.' },
  { name: 'EOMONTH', signature: 'EOMONTH(start_date, months)', detail: 'Return the last day of the month before or after the start date.' },
  { name: 'EXPAND', signature: 'EXPAND(array, rows, columns, [pad_with])', detail: 'Expand an array to specified dimensions.' },
  { name: 'FILTER', signature: 'FILTER(array, include, [if_empty])', detail: 'Filter a range with the provided criteria.' },
  { name: 'FLOOR', signature: 'FLOOR(number, significance)', detail: 'Round a number down to the nearest multiple of significance.' },
  { name: 'IF', signature: 'IF(logical_test, value_if_true, [value_if_false])', detail: 'Check a condition and return a value if TRUE or FALSE.' },
  { name: 'IFERROR', signature: 'IFERROR(value, value_if_error)', detail: 'Return a value if there is an error, otherwise return the original value.' },
  { name: 'IFS', signature: 'IFS(logical_test1, value_if_true1, ...)', detail: 'Evaluate multiple conditions and return the first TRUE result.' },
  { name: 'INDEX', signature: 'INDEX(array, row_num, [column_num], [area_num])', detail: 'Return a value or reference of the cell at the intersection of a row and column.' },
  { name: 'INDIRECT', signature: 'INDIRECT(ref_text, [a1])', detail: 'Return the reference specified by a text string.' },
  { name: 'INT', signature: 'INT(number)', detail: 'Round a number down to the nearest integer.' },
  { name: 'ISBLANK', signature: 'ISBLANK(value)', detail: 'Return TRUE if value refers to an empty cell.' },
  { name: 'ISNUMBER', signature: 'ISNUMBER(value)', detail: 'Return TRUE if value is a number.' },
  { name: 'LAMBDA', signature: 'LAMBDA(parameter, calculation)', detail: 'Create reusable custom functions inline.' },
  { name: 'LEFT', signature: 'LEFT(text, [num_chars])', detail: 'Return the first characters in a text string.' },
  { name: 'LEN', signature: 'LEN(text)', detail: 'Return the number of characters in a text string.' },
  { name: 'LET', signature: 'LET(name1, value1, calculation_or_name2, ...)', detail: 'Assign names to calculation results and reuse them.' },
  { name: 'LOWER', signature: 'LOWER(text)', detail: 'Convert text to lowercase.' },
  { name: 'MATCH', signature: 'MATCH(lookup_value, lookup_array, [match_mode], [search_mode])', detail: 'Find the relative position of an item in a range.' },
  { name: 'MAX', signature: 'MAX(number1, [number2], ...)', detail: 'Return the largest number in a set of values.' },
  { name: 'MAXIFS', signature: 'MAXIFS(max_range, criteria_range1, criteria1, ...)', detail: 'Return the maximum value that meets multiple criteria.' },
  { name: 'MID', signature: 'MID(text, start_num, num_chars)', detail: 'Return characters from the middle of a text string.' },
  { name: 'MIN', signature: 'MIN(number1, [number2], ...)', detail: 'Return the smallest number in a set of values.' },
  { name: 'MINIFS', signature: 'MINIFS(min_range, criteria_range1, criteria1, ...)', detail: 'Return the minimum value that meets multiple criteria.' },
  { name: 'OFFSET', signature: 'OFFSET(reference, rows, cols, [height], [width])', detail: 'Return a reference offset from a starting cell.' },
  { name: 'OR', signature: 'OR(logical1, [logical2], ...)', detail: 'Return TRUE if any argument evaluates to TRUE.' },
  { name: 'REDUCE', signature: 'REDUCE(initial_value, array, lambda)', detail: 'Reduce an array to an accumulated result.' },
  { name: 'RIGHT', signature: 'RIGHT(text, [num_chars])', detail: 'Return the last characters in a text string.' },
  { name: 'ROUND', signature: 'ROUND(number, num_digits)', detail: 'Round a number to a specified number of digits.' },
  { name: 'ROUNDDOWN', signature: 'ROUNDDOWN(number, num_digits)', detail: 'Round a number down, toward zero.' },
  { name: 'ROUNDUP', signature: 'ROUNDUP(number, num_digits)', detail: 'Round a number up, away from zero.' },
  { name: 'SEQUENCE', signature: 'SEQUENCE(rows, [columns], [start], [step])', detail: 'Generate an array of sequential numbers.' },
  { name: 'SUBTOTAL', signature: 'SUBTOTAL(function_num, ref1, [ref2], ...)', detail: 'Return a subtotal in a list or database.' },
  { name: 'SUM', signature: 'SUM(number1, [number2], ...)', detail: 'Add all the numbers in a range.' },
  { name: 'SUMIF', signature: 'SUMIF(range, criteria, [sum_range])', detail: 'Add the cells that meet a single criterion.' },
  { name: 'SUMIFS', signature: 'SUMIFS(sum_range, criteria_range1, criteria1, ...)', detail: 'Add the cells that meet multiple criteria.' },
  { name: 'SUMPRODUCT', signature: 'SUMPRODUCT(array1, [array2], ...)', detail: 'Multiply arrays and return the sum of the products.' },
  { name: 'SWITCH', signature: 'SWITCH(expression, value1, result1, [default_or_value2, result2], ...)', detail: 'Evaluate an expression against a list of values.' },
  { name: 'TAKE', signature: 'TAKE(array, rows, [columns])', detail: 'Return a specified number of contiguous rows or columns.' },
  { name: 'TEXT', signature: 'TEXT(value, format_text)', detail: 'Format a number and convert it to text.' },
  { name: 'TEXTAFTER', signature: 'TEXTAFTER(text, delimiter, [instance], ...)', detail: 'Return text that occurs after a given delimiter.' },
  { name: 'TEXTBEFORE', signature: 'TEXTBEFORE(text, delimiter, [instance], ...)', detail: 'Return text that occurs before a given delimiter.' },
  { name: 'TEXTJOIN', signature: 'TEXTJOIN(delimiter, ignore_empty, text1, [text2], ...)', detail: 'Join text items with a delimiter.' },
  { name: 'TEXTSPLIT', signature: 'TEXTSPLIT(text, col_delimiter, [row_delimiter], ...)', detail: 'Split text into rows and columns using delimiters.' },
  { name: 'TRANSPOSE', signature: 'TRANSPOSE(array)', detail: 'Return the transpose of an array.' },
  { name: 'TRIM', signature: 'TRIM(text)', detail: 'Remove spaces from text except for single spaces between words.' },
  { name: 'UNIQUE', signature: 'UNIQUE(array, [by_col], [exactly_once])', detail: 'Return unique values from a range or array.' },
  { name: 'UPPER', signature: 'UPPER(text)', detail: 'Convert text to uppercase.' },
  { name: 'VALUE', signature: 'VALUE(text)', detail: 'Convert text that appears in a recognized format to a number.' },
  { name: 'VLOOKUP', signature: 'VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])', detail: 'Lookup a value in a table by column.' },
  { name: 'XLOOKUP', signature: 'XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])', detail: 'Return a value from a range or array.' },
  { name: 'XMATCH', signature: 'XMATCH(lookup_value, lookup_array, [match_mode], [search_mode])', detail: 'Return the relative position of an item in a range.' }
];

module.exports = FUNCTION_ITEMS;
